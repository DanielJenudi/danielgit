!<arch>
strings1.c/     0           0     0     644     747       `
#include <stdio.h> /* printf */
#include <ctype.h> /*isupper*/
#include <stdlib.h> /*malloc*/
#include <assert.h> /*assert*/

#include "strings.h" /* strlen */

size_t StrLen(const char *str)
{
	int length = 0;
	assert(NULL != str);
	while ('\0' != *str)
	{
		++length;
		++str;
	}	
	return length;
} 

int StrCmp(const char *str1, const char *str2)
{
	assert(NULL != str1);
	assert(NULL != str2);
	while( (*str1 == *str2) && ('\0' != *str1) )
	{	
		++str1;   
		++str2;
	}

	return *str1-*str2;
}

int StrnCmp(const char *str1, const char *str2, size_t n)
{
	size_t i = 1;
	assert(NULL != str1);
	assert(NULL != str2);
	if ( 0 == n )
	{
		return 0;
	}
	while(*str1 == *str2 && i < n)
	{	
		++str1;   
		++str2;
		++i;
	}

	return *str1-*str2;
}


strings2.c/     0           0     0     644     665       `

#include <stdio.h> /* printf */
#include <ctype.h> /*isupper*/
#include <stdlib.h> /*malloc*/
#include <assert.h> /*assert*/

#include "strings.h" /* strlen */

int StrCasecmp(const char *str1, const char *str2)
{
	char *copy_str1 = 0;
	char *copy_str2 = 0;
	copy_str1 =(char *) str1;
	copy_str2 =(char *)str2;
	while(*copy_str1 && tolower(*copy_str1) == tolower(*copy_str2))
	{	
	        ++copy_str1;
	        ++copy_str2;
	}
	return tolower(*copy_str1) - tolower(*copy_str2) ;
}

char *StrCpy (char *dest, const char *src)
{
	int i = 0;
	assert(NULL != dest);
	assert(NULL != src);
	while (*(src + i))
	{
		*(dest + i) = *(src + i);
		++i;
	}
	
	return dest;
}


strings3.c/     0           0     0     644     746       `

#include <stdio.h> /* printf */
#include <ctype.h> /*isupper*/
#include <stdlib.h> /*malloc*/
#include <assert.h> /*assert*/

#include "strings.h" /* strlen */

char *StrnCpy(char *dest, const char *src, size_t n)
{
	size_t len = n;
	assert(NULL != dest);
	assert(NULL != src);
	while ( '\0' != *src && n )
	{
		*dest= *src;
		++src;
		++dest;
		--n;
	}
	while (n)
	{
		*dest = '\0';
		++dest;
		--n;
	}
	
	return dest - len ;
}	

char *StrChr(const char *str, int c)
{
	while ( '\0' != *str )
	{
		if ( c == *str)
		{
			return  (char *)str;
		}
		++str;
	}	
	return NULL;
}

char *StrDup(const char *str1)
{
	size_t length = StrLen(str1) +1 ;
	char *str2 = malloc(length);
	if( NULL == str2)
	{
		return NULL;
	}
	return StrCpy(str2,str1);
}

strings4.c/     0           0     0     644     1238      `

#include <stdio.h> /* printf */
#include <ctype.h> /*isupper*/
#include <stdlib.h> /*malloc*/
#include <assert.h> /*assert*/

#include "strings.h" /* strlen */

char *StrCat(char *dest, const char *src)
{
	int dest_length = StrLen((char*)dest);
	int src_length = StrLen((char*)src);
	dest += dest_length;
	while ( *(src) )
	{
		*dest = *src;
		++dest;
		++src;
	}
	dest -= (dest_length + src_length);
	return dest;
}

char *StrnCat(char *dest, const char *src, size_t n)
{
	size_t i = 0;
	int length_d = StrLen((char*)dest);
	int length_s = StrLen((char*)src);
	for ( i = 0 ; i < length_s && i < n ; ++i)
	{
		*(dest + i + length_d) = *(src ++);
	}
	return dest;
}

char *StrStr(const char *haystack, const char *needle)
{
	int count = 0 ;
	int length_needle = StrLen((char*)needle);
	if (!*needle)
	{
		return (char *)haystack;
	}
	while  (*haystack)
	{
		while (*needle && *needle == *(haystack + count))
		{
			if (count == length_needle-1)
			{
				return (char *)haystack;
			}
			++count;
			++needle;
		}
		++haystack;
	} 
	return NULL;
}

size_t StrSpn(const char *str1, const char *str2)
{
	size_t count = 0;
	while (*str1)
	
	{
		if (!StrChr(str2 , *str1) ) 
		{
			return count;
		}
		++count;
		++str1;
	}
	return count;
}


